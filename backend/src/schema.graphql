type CreateCarResponse {
  ok: Boolean!
  error: String
  car: String
}

type Mutation {
  CreateCar(DriverID: Int!, StartingPointID: Int!, MiddlePointsID: [Int]!, DestinationID: Int!): CreateCarResponse!
  CreateRoute(Comp: String!, Model: String!, PlateNum: String!, Capacity: Int!): CreateRouteResponse!
  EmailSignIn(PhoneNumber: String!, Password: String!): EmailSignInResponse!
  EmailSignUp(Name: String!, Password: String!, Sex: Int!, PhoneNumber: String!): EmailSignUpResponse!
}

type Car {
  ID: Int!
  Comp: String!
  Model: String!
  PlateNum: String!
  Capacity: Int!
  Owner: User!
  Transactions: Transaction
  createdAt: String!
  updatedAt: String
}

type Location {
  ID: Int!
  Name: String!
  Longtitude: Float!
  Latitude: Float!
  LocationAsStarting: Route
  LocationAsMidpoints: [Route]
  LocationAsDistination: Route
  createdAt: String!
  updatedAt: String
}

type Rating {
  ID: Int!
  RaterID: Int!
  RatedPersonID: Int!
  RaterComments: String!
  RouteID: Int!
  Rater: User!
  Rated: User!
  createdAt: String!
  updatedAt: String
}

type Ride {
  ID: Int!
  TransactionID: Int!
  DriverID: Int!
  MaximumCapacity: Int!
  RouteID: Int!
  Driver: User!
  Transactions: [Transaction]
  createdAt: String!
  updatedAt: String
}

type CreateRouteResponse {
  ok: Boolean!
  error: String
  route: String
}

type Route {
  ID: Int!
  DriverID: Int!
  StartingPointID: Int!
  MiddlePointsID: [Int]
  DestinationID: Int!
  Starting: Location
  MiddlePoints: [Location]
  Distination: Location
  createdAt: String!
  updatedAt: String
}

type Transaction {
  ID: Int!
  PassengerID: Int!
  Payment: String!
  RouteID: Int!
  DepartureTime: String!
  ArrivalTime: String!
  CarID: Int!
  Status: TransStatus!
  RequestTime: String!
  Passenger: User!
  Ride: Ride!
  Car: Car!
  createdAt: String!
  updatedAt: String
}

enum TransStatus {
  PENDING
  APPROVED
  REJECTED
}

type EmailSignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignUpResponse {
  ok: Boolean!
  error: String
  token: String
}

type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type Query {
  GetMyProfile: GetMyProfileResponse!
}

type User {
  ID: Int!
  Name: String!
  Password: String
  Sex: Int
  Age: Int
  DriverRating: Int
  PassengerRating: Int
  DriverPreferredRouteID: Int
  PassengerPreferredRouteID: Int
  CarID: Int
  EmailAddress: String
  PhoneNumber: String
  CreditCardNumber: String
  RidesAsDriver: [Ride]
  Transactions: [Transaction]
  Car: [Car]!
  RatingAsRater: [Rating]
  RatingAsRated: [Rating]
  createdAt: String!
  updatedAt: String
}
