{"version":3,"sources":["NativeStackView.tsx"],"names":["React","View","StyleSheet","StackActions","ScreenStack","Screen","ScreenComponent","useTheme","HeaderConfig","NativeStackView","state","navigation","descriptors","colors","styles","container","routes","map","route","key","options","renderScene","render","gestureEnabled","stackPresentation","stackAnimation","contentStyle","absoluteFill","emit","type","target","dispatch","pop","source","backgroundColor","background","create","flex"],"mappings":"ygCAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,IAAT,CAAeC,UAAf,KAAiC,cAAjC,CACA,OAA+BC,YAA/B,KAAmD,2BAAnD,CAEA,OACEC,WADF,CAEEC,MAAM,GAAIC,CAAAA,eAFZ,KAKO,sBALP,CAMA,OAASC,QAAT,KAAyB,0BAAzB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CAMA,GAAMH,CAAAA,MAAM,CAAIC,eAAhB,CAQA,cAAe,SAASG,CAAAA,eAAT,MAIL,IAHRC,CAAAA,KAGQ,MAHRA,KAGQ,CAFRC,UAEQ,MAFRA,UAEQ,CADRC,WACQ,MADRA,WACQ,eACWL,QAAQ,EADnB,CACAM,MADA,WACAA,MADA,CAGR,MACE,qBAAC,WAAD,EAAa,KAAK,CAAEC,MAAM,CAACC,SAA3B,iDACGL,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAiB,SAAAC,KAAK,CAAI,2BACgBN,WAAW,CAACM,KAAK,CAACC,GAAP,CAD3B,CACjBC,OADiB,uBACjBA,OADiB,CACAC,WADA,uBACRC,MADQ,IAGvBC,CAAAA,cAHuB,CAOrBH,OAPqB,CAGvBG,cAHuB,uBAOrBH,OAPqB,CAIvBI,iBAJuB,CAIvBA,iBAJuB,gCAIH,MAJG,uBAKvBC,cALuB,CAOrBL,OAPqB,CAKvBK,cALuB,CAMvBC,YANuB,CAOrBN,OAPqB,CAMvBM,YANuB,CASzB,MACE,qBAAC,MAAD,EACE,GAAG,CAAER,KAAK,CAACC,GADb,CAEE,KAAK,CAAEjB,UAAU,CAACyB,YAFpB,CAGE,cAAc,CAAEJ,cAHlB,CAIE,iBAAiB,CAAEC,iBAJrB,CAKE,cAAc,CAAEC,cALlB,CAME,QAAQ,CAAE,mBAAM,CACdd,UAAU,CAACiB,IAAX,CAAgB,CACdC,IAAI,CAAE,QADQ,CAEdC,MAAM,CAAEZ,KAAK,CAACC,GAFA,CAAhB,EAID,CAXH,CAYE,WAAW,CAAE,sBAAM,CACjBR,UAAU,CAACiB,IAAX,CAAgB,CACdC,IAAI,CAAE,SADQ,CAEdC,MAAM,CAAEZ,KAAK,CAACC,GAFA,CAAhB,EAKAR,UAAU,CAACoB,QAAX,kBACK5B,YAAY,CAAC6B,GAAb,EADL,EAEEC,MAAM,CAAEf,KAAK,CAACC,GAFhB,CAGEW,MAAM,CAAEpB,KAAK,CAACS,GAHhB,IAKD,CAvBH,iDAyBE,oBAAC,YAAD,aAAkBC,OAAlB,EAA2B,KAAK,CAAEF,KAAlC,kDAzBF,CA0BE,oBAAC,IAAD,EACE,KAAK,CAAE,CACLJ,MAAM,CAACC,SADF,CAEL,CAAEmB,eAAe,CAAErB,MAAM,CAACsB,UAA1B,CAFK,CAGLT,YAHK,CADT,iDAOGL,WAAW,EAPd,CA1BF,CADF,CAsCD,CA/CA,CADH,CADF,CAoDD,CAED,GAAMP,CAAAA,MAAM,CAAGZ,UAAU,CAACkC,MAAX,CAAkB,CAC/BrB,SAAS,CAAE,CACTsB,IAAI,CAAE,CADG,CADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { StackNavigationState, StackActions } from '@react-navigation/routers';\n\nimport {\n  ScreenStack,\n  Screen as ScreenComponent,\n  ScreenProps,\n  // eslint-disable-next-line import/no-unresolved\n} from 'react-native-screens';\nimport { useTheme } from '@react-navigation/native';\nimport HeaderConfig from './HeaderConfig';\nimport {\n  NativeStackNavigationHelpers,\n  NativeStackDescriptorMap,\n} from '../types';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\n\ntype Props = {\n  state: StackNavigationState;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const { colors } = useTheme();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map(route => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          stackPresentation = 'push',\n          stackAnimation,\n          contentStyle,\n        } = options;\n\n        return (\n          <Screen\n            key={route.key}\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={gestureEnabled}\n            stackPresentation={stackPresentation}\n            stackAnimation={stackAnimation}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n            }}\n          >\n            <HeaderConfig {...options} route={route} />\n            <View\n              style={[\n                styles.container,\n                { backgroundColor: colors.background },\n                contentStyle,\n              ]}\n            >\n              {renderScene()}\n            </View>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}