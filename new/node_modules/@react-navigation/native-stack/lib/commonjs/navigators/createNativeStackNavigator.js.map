{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["NativeStackNavigator","props","Error","initialRouteName","children","screenOptions","rest","StackRouter","state","descriptors","navigation","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key"],"mappings":"icAAA,oDACA,gDAMA,kDAOA,wDAIA,iF,86BAOA,QAASA,CAAAA,oBAAT,CAA8BC,KAA9B,CAAgE,CAC9D,GAAI,CAAC,wCAAL,CAAuB,CACrB,KAAM,IAAIC,CAAAA,KAAJ,CACJ,oEADI,CAAN,CAGD,CAL6D,GAOtDC,CAAAA,gBAPsD,CAOCF,KAPD,CAOtDE,gBAPsD,CAOpCC,QAPoC,CAOCH,KAPD,CAOpCG,QAPoC,CAO1BC,aAP0B,CAOCJ,KAPD,CAO1BI,aAP0B,CAORC,IAPQ,uCAOCL,KAPD,4EAQnB,iCAKzCM,oBALyC,CAK5B,CACbJ,gBAAgB,CAAhBA,gBADa,CAEbC,QAAQ,CAARA,QAFa,CAGbC,aAAa,CAAbA,aAHa,CAL4B,CARmB,CAQtDG,KARsD,uBAQtDA,KARsD,CAQ/CC,WAR+C,uBAQ/CA,WAR+C,CAQlCC,UARkC,uBAQlCA,UARkC,CAmB9DC,eAAMC,SAAN,CACE,iBACEF,CAAAA,UAAU,CAACG,WAAX,EACAH,UAAU,CAACG,WAAX,CAAuB,UAAvB,CAAmC,SAAAC,CAAC,CAAI,CACtC,GAAMC,CAAAA,SAAS,CAAGL,UAAU,CAACK,SAAX,EAAlB,CAIAC,qBAAqB,CAAC,UAAM,CAC1B,GACER,KAAK,CAACS,KAAN,CAAc,CAAd,EACAF,SADA,EAEA,CAAED,CAAD,CAAkCI,gBAHrC,CAIE,CAGAR,UAAU,CAACS,QAAX,kBACKC,sBAAaC,QAAb,EADL,EAEEC,MAAM,CAAEd,KAAK,CAACe,GAFhB,IAID,CACF,CAboB,CAArB,CAcD,CAnBD,CAFF,EADF,CAuBE,CAACb,UAAD,CAAaF,KAAK,CAACS,KAAnB,CAA0BT,KAAK,CAACe,GAAhC,CAvBF,EA0BA,MACE,8BAAC,wBAAD,0BACMjB,IADN,EAEE,KAAK,CAAEE,KAFT,CAGE,UAAU,CAAEE,UAHd,CAIE,WAAW,CAAED,WAJf,kDADF,CAQD,C,aAEc,mCAGbT,oBAHa,C","sourcesContent":["import React from 'react';\nimport {\n  createNavigatorFactory,\n  useNavigationBuilder,\n  EventArg,\n} from '@react-navigation/native';\n\nimport {\n  StackRouter,\n  StackNavigationState,\n  StackRouterOptions,\n  StackActions,\n} from '@react-navigation/routers';\n\nimport {\n  screensEnabled,\n  // eslint-disable-next-line import/no-unresolved\n} from 'react-native-screens';\nimport NativeStackView from '../views/NativeStackView';\nimport {\n  NativeStackNavigatorProps,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n} from '../types';\n\nfunction NativeStackNavigator(props: NativeStackNavigatorProps) {\n  if (!screensEnabled()) {\n    throw new Error(\n      'Native stack is only available if React Native Screens is enabled.'\n    );\n  }\n\n  const { initialRouteName, children, screenOptions, ...rest } = props;\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', e => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NativeStackView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  NativeStackNavigationOptions,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]}