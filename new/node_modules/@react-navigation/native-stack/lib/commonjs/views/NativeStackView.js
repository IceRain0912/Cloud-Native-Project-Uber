var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports,"__esModule",{value:true});exports.default=NativeStackView;var _extends2=_interopRequireDefault(require("@babel/runtime/helpers/extends"));var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var React=_interopRequireWildcard(require("react"));var _reactNative=require("react-native");var _routers=require("@react-navigation/routers");var _reactNativeScreens=require("react-native-screens");var _native=require("@react-navigation/native");var _HeaderConfig=_interopRequireDefault(require("./HeaderConfig"));var _jsxFileName="/Users/satya/Workspace/Projects/navigation-ex/packages/native-stack/src/views/NativeStackView.tsx";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var Screen=_reactNativeScreens.Screen;function NativeStackView(_ref){var state=_ref.state,navigation=_ref.navigation,descriptors=_ref.descriptors;var _useTheme=(0,_native.useTheme)(),colors=_useTheme.colors;return React.createElement(_reactNativeScreens.ScreenStack,{style:styles.container,__source:{fileName:_jsxFileName,lineNumber:34}},state.routes.map(function(route){var _descriptors$route$ke=descriptors[route.key],options=_descriptors$route$ke.options,renderScene=_descriptors$route$ke.render;var gestureEnabled=options.gestureEnabled,_options$stackPresent=options.stackPresentation,stackPresentation=_options$stackPresent===void 0?'push':_options$stackPresent,stackAnimation=options.stackAnimation,contentStyle=options.contentStyle;return React.createElement(Screen,{key:route.key,style:_reactNative.StyleSheet.absoluteFill,gestureEnabled:gestureEnabled,stackPresentation:stackPresentation,stackAnimation:stackAnimation,onAppear:function onAppear(){navigation.emit({type:'appear',target:route.key});},onDismissed:function onDismissed(){navigation.emit({type:'dismiss',target:route.key});navigation.dispatch(_objectSpread({},_routers.StackActions.pop(),{source:route.key,target:state.key}));},__source:{fileName:_jsxFileName,lineNumber:45}},React.createElement(_HeaderConfig.default,(0,_extends2.default)({},options,{route:route,__source:{fileName:_jsxFileName,lineNumber:70}})),React.createElement(_reactNative.View,{style:[styles.container,{backgroundColor:colors.background},contentStyle],__source:{fileName:_jsxFileName,lineNumber:71}},renderScene()));}));}var styles=_reactNative.StyleSheet.create({container:{flex:1}});
//# sourceMappingURL=NativeStackView.js.map